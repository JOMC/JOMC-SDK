<?xml version="1.0" encoding="UTF-8"?>
<!--

  Copyright (c) 2009 The JOMC Project
  Copyright (c) 2005 Christian Schulte <schulte2005@users.sourceforge.net>
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the
      distribution.

  THIS SOFTWARE IS PROVIDED BY THE JOMC PROJECT AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE JOMC PROJECT OR
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

  $Id$

-->
<jaxb:bindings xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
               xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
               xmlns:xs="http://www.w3.org/2001/XMLSchema"
               xmlns:sdk="http://jomc.org/sdk/model"
               xmlns:ci="http://jaxb.dev.java.net/plugin/code-injector"
               version="2.0">

  <jaxb:bindings schemaLocation="jomc-sdk-1.0.xsd">
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='ListType']">
      <ci:code><![CDATA[
    /**
     * Gets the Java value of this type.
     *
     * @param classLoader The class loader to use for getting the Java value; {@code null} to use the platform's
     * bootstrap class loader.
     *
     * @return The Java value of this type.
     *
     * @throws org.jomc.model.PropertyException if getting the Java value fails.
     */
    public java.util.List getJavaValue( final ClassLoader classLoader ) throws org.jomc.model.PropertyException
    {
        final java.util.List javaValue = new java.util.ArrayList( this.getItem().size() );

        for ( ItemType i : this.getItem() )
        {
            javaValue.add( ReflectionHelper.getJavaValue( classLoader, i ) );
        }

        return java.util.Collections.unmodifiableList( javaValue );
    }
]]>
      </ci:code>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='MapType']/xs:sequence/xs:element[@name='entry']/xs:complexType/xs:sequence/xs:element[@name='key']">
      <jaxb:property>
        <jaxb:javadoc>The key of the entry.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='MapType']/xs:sequence/xs:element[@name='entry']/xs:complexType/xs:sequence/xs:element[@name='value']">
      <jaxb:property>
        <jaxb:javadoc>The value of the entry.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='MapType']">
      <ci:code><![CDATA[
    /**
     * Gets the Java value of this type.
     *
     * @param classLoader The class loader to use for getting the Java value; {@code null} to use the platform's
     * bootstrap class loader.
     *
     * @return The Java value of this type.
     *
     * @throws org.jomc.model.PropertyException if getting the Java value fails.
     */
    public java.util.Map getJavaValue( final ClassLoader classLoader ) throws org.jomc.model.PropertyException
    {
        final java.util.Map javaValue = new java.util.HashMap( this.getEntry().size() );

        for ( MapType.Entry e : this.getEntry() )
        {
            javaValue.put( ReflectionHelper.getJavaValue( classLoader, e.getKey() ),
                           ReflectionHelper.getJavaValue( classLoader, e.getValue() ) );

        }

        return java.util.Collections.unmodifiableMap( javaValue );
    }
]]>
      </ci:code>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='ItemType']/xs:sequence/xs:any">
      <jaxb:property>
        <jaxb:javadoc>The object value of the item.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='ItemType']/xs:attribute[@name='value']">
      <jaxb:property>
        <jaxb:javadoc>The string value of the item.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='ItemType']/xs:attribute[@name='type']">
      <jaxb:property>
        <jaxb:javadoc>The type of the item value.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='ItemType']">
      <ci:code><![CDATA[
    /**
     * Gets the Java value of the item.
     * <p>The Java value of the item is computed based on the following rules:
     * <ol>
     * <li>If property {@code any} is set, the Java value is computed based on the object returned by method
     * {@code getAny()} by possibly unwrapping any {@code JAXBElement} instances. If that object declares a
     * <blockquote><pre>public Object getJavaValue( ClassLoader )</pre></blockquote> method, the value returned by this
     * method is the object returned by a call to that method using reflection. If that object does not declare such a
     * method, the value returned by this method is that (possibly unwrapped) object.</li>
     * <li>If property {@code value} is set, the Java value is computed based on the values of properties {@code type}
     * and {@code value}. If property {@code type} is not set or equals {@code java.lang.String}, the value returned
     * by this method is the string value returned by method {@code getValue()}. If property {@code type} equals a name
     * of a Java primitive type, an instance of the wrapper class corresponding to that primitive type name is returned
     * instantiated by passing the value of property {@code value} to the public constructor taking a single
     * {@code java.lang.String} argument of that wrapper class. For all other values of property {@code type} an
     * instance of a class with a name equal to the value of property {@code type} is returned instantiated by passing
     * the value of property {@code value} to the public constructor taking a single {@code java.lang.String} argument
     * of that class.</li>
     * <li>If properties {@code any} and {@code value} are both {@code null}, this method returns {@code null}.</li>
     * </ol></p>
     *
     * @param classLoader The class loader to use for getting the Java value; {@code null} to use the platform's
     * bootstrap class loader.
     *
     * @return The Java value of the item or {@code null}.
     *
     * @throws org.jomc.model.PropertyException if getting the Java value of the item fails.
     */
    public Object getJavaValue( final ClassLoader classLoader ) throws org.jomc.model.PropertyException
    {
        try
        {
            if ( this.getAny() != null )
            {
                if ( this.getType() == null )
                {
                    throw new org.jomc.model.PropertyException( getMessage( "objectWithoutType" ) );
                }

                String typeName = this.getType();
                final int idx = typeName.indexOf( "<" );
                if ( idx != -1 )
                {
                    typeName = typeName.substring( 0, idx );
                }

                final Class javaType = Class.forName( typeName, true, classLoader );
                final Object anyObject = this.getAny() instanceof JAXBElement
                                         ? ( (JAXBElement) this.getAny() ).getValue() : this.getAny();

                return ReflectionHelper.getJavaValue( classLoader, anyObject, javaType );
            }

            Class javaType = String.class;
            boolean primitive = false;

            if ( this.getType() != null )
            {
                if ( Boolean.TYPE.getName().equals( this.getType() ) )
                {
                    javaType = Boolean.class;
                    primitive = true;
                }
                else if ( Byte.TYPE.getName().equals( this.getType() ) )
                {
                    javaType = Byte.class;
                    primitive = true;
                }
                else if ( Character.TYPE.getName().equals( this.getType() ) )
                {
                    javaType = Character.class;
                    primitive = true;
                }
                else if ( Double.TYPE.getName().equals( this.getType() ) )
                {
                    javaType = Double.class;
                    primitive = true;
                }
                else if ( Float.TYPE.getName().equals( this.getType() ) )
                {
                    javaType = Float.class;
                    primitive = true;
                }
                else if ( Integer.TYPE.getName().equals( this.getType() ) )
                {
                    javaType = Integer.class;
                    primitive = true;
                }
                else if ( Long.TYPE.getName().equals( this.getType() ) )
                {
                    javaType = Long.class;
                    primitive = true;
                }
                else if ( Short.TYPE.getName().equals( this.getType() ) )
                {
                    javaType = Short.class;
                    primitive = true;
                }
                else
                {
                    String typeName = this.getType();
                    final int idx = typeName.indexOf( "<" );
                    if ( idx != -1 )
                    {
                        typeName = typeName.substring( 0, idx );
                    }

                    javaType = Class.forName( typeName, true, classLoader );
                }
            }

            if ( this.getValue() == null && primitive )
            {
                throw new org.jomc.model.PropertyException( getMessage( "objectWithoutValue", this.getType() ) );
            }

            return ReflectionHelper.getJavaValue( javaType, this.getValue() );
        }
        catch ( final ClassNotFoundException e )
        {
            throw new org.jomc.model.PropertyException( getMessage( "classNotFound", this.getType() ), e );
        }
    }

    private static String getMessage( final String key, final Object... arguments )
    {
        return java.text.MessageFormat.format( java.util.ResourceBundle.getBundle(
            ItemType.class.getName().replace( '.', '/' ), java.util.Locale.getDefault() ).getString( key ), arguments );

    }
]]>
      </ci:code>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='SchemasType']/xs:attribute[@name='language-id']">
      <jaxb:property>
        <jaxb:javadoc>The language id of the list of schemas.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='SchemasType']">
      <ci:code><![CDATA[
    /**
     * Gets a schema for a given system id from this list of schemas.
     *
     * @param systemId The system id of the schema to return.
     *
     * @return The schema with system id {@code systemId} from the list or {@code null} if no schema matching
     * {@code systemId} is found.
     *
     * @throws NullPointerException if {@code systemId} is {@code null}.
     */
    public SchemaType getSchemaBySystemId( final String systemId )
    {
        if ( systemId == null )
        {
            throw new NullPointerException( "systemId" );
        }

        for ( SchemaType s : this.getSchema() )
        {
            if ( systemId.equals( s.getSystemId() ) )
            {
                return s;
            }
        }

        return null;
    }

    /**
     * Gets a schema for a given public id from this list of schemas.
     *
     * @param publicId The public id of the schema to return.
     *
     * @return The schema with public id {@code publicId} from the list or {@code null} if no schema matching
     * {@code publicId} is found.
     *
     * @throws NullPointerException if {@code publicId} is {@code null}.
     */
    public SchemaType getSchemaByPublicId( final String publicId )
    {
        if ( publicId == null )
        {
            throw new NullPointerException( "publicId" );
        }

        for ( SchemaType s : this.getSchema() )
        {
            if ( publicId.equals( s.getPublicId() ) )
            {
                return s;
            }
        }

        return null;
    }
]]>
      </ci:code>
    </jaxb:bindings>
    <!-- *********************************************************************************************************** -->
    <jaxb:bindings node="xs:complexType[@name='SchemaType']/xs:attribute[@name='system-id']">
      <jaxb:property>
        <jaxb:javadoc>The system identifier of the schema.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
    <jaxb:bindings node="xs:complexType[@name='SchemaType']/xs:attribute[@name='public-id']">
      <jaxb:property>
        <jaxb:javadoc>The public identifier of the schema or {@code null}.</jaxb:javadoc>
      </jaxb:property>
    </jaxb:bindings>
  </jaxb:bindings>
</jaxb:bindings>
